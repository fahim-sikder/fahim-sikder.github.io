<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julia | Md Fahim Sikder</title>
    <link>https://fahim-sikder.github.io/tag/julia/</link>
      <atom:link href="https://fahim-sikder.github.io/tag/julia/index.xml" rel="self" type="application/rss+xml" />
    <description>Julia</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©Md Fahim Sikder</copyright><lastBuildDate>Thu, 30 Jul 2020 10:50:26 +0600</lastBuildDate>
    <image>
      <url>https://fahim-sikder.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Julia</title>
      <link>https://fahim-sikder.github.io/tag/julia/</link>
    </image>
    
    <item>
      <title>Julia Tutorial Part 2: Data Structures</title>
      <link>https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/</link>
      <pubDate>Thu, 30 Jul 2020 10:50:26 +0600</pubDate>
      <guid>https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/</guid>
      <description>&lt;h2 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h2&gt;
&lt;p&gt;In this tutorial, we will see &lt;code&gt;Julia&#39;s&lt;/code&gt; data structure. Namely,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tuple,&lt;/li&gt;
&lt;li&gt;Array,&lt;/li&gt;
&lt;li&gt;Dictionary, and&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tuple&#34;&gt;Tuple&lt;/h3&gt;
&lt;p&gt;Lets first discuss about &lt;code&gt;Tuple&lt;/code&gt;. Tuple and Array can hold a list of elements. But the basic difference between them is, &lt;code&gt;Tuple&lt;/code&gt; is immutable. It means that, we can&amp;rsquo;t change the value of a tuple once it&amp;rsquo;s created. We can create a tuple by giving some ordered elements into a paranthesis &lt;code&gt;( )&lt;/code&gt;. The syntax of a tuple is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;(item1, item2, itme3, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s see an example. Suppose we want to create a tuple consists of some mixed values. We just give those values within a paranthesis &lt;code&gt;( )&lt;/code&gt; or just without the parenthesis. Both will work just fine. Then we can print the type of the tuple by using the &lt;code&gt;typeof()&lt;/code&gt; method. To access the elements of a tuple, we can use the index values of tuple, but keep in mind in &lt;code&gt;Julia&lt;/code&gt;, index starts from 1. So, in order to access the first element of tuple, we need to follow this syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
tuple_name[1]

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;tup1 = (1, 2, 4.5, &amp;quot;Hello&amp;quot;)

println(tup1)

#this also works

tup2 = &#39;c&#39;, 11, 0.5, &amp;quot;World&amp;quot;

print(tup2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;(1, 2, 4.5, &amp;quot;Hello&amp;quot;)
(&#39;c&#39;, 11, 0.5, &amp;quot;World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-1&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(&amp;quot;Type of tup1: &amp;quot;, typeof(tup1))
println(&amp;quot;Type of tup2: &amp;quot;, typeof(tup2))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-1&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Type of tup1: Tuple{Int64,Int64,Float64,String}
Type of tup2: Tuple{Char,Int64,Float64,String}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-2&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;#accessing Elements

println(tup1[1])
println(tup2[end])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-2&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1
World
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As, we were saying earlier that, tuples are immuatble. That means, we can not change the elements of a tuple after it has been initialized. Let&amp;rsquo;s test that. We will try to change the third element of &lt;code&gt;tup1&lt;/code&gt;. And it will give an error.&lt;/p&gt;
&lt;h4 id=&#34;_input_-3&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;tup1[3] = &#39;c&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-3&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;MethodError: no method matching setindex!(::Tuple{Int64,Int64,Float64,String}, ::Char, ::Int64)



Stacktrace:

 [1] top-level scope at In[4]:1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is an another version of tuples and it is called &lt;strong&gt;NamedTuples&lt;/strong&gt;. Here, we can assign an unique name to each elements of the tuple to access them.&lt;/p&gt;
&lt;p&gt;To access by using its name we need to use the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
tuple_name.variable_name

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-4&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;named_tup = (lang = &#39;C&#39;, int_num = 1, float_num = 3.6)

println(&amp;quot;Elements of named_tuple: &amp;quot;, named_tup)

println(&amp;quot;Accessing first element by index: &amp;quot;, named_tup[1])

println(&amp;quot;Accessing first element by using variable name: &amp;quot;, named_tup.lang)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-4&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Elements of named_tuple: (lang = &#39;C&#39;, int_num = 1, float_num = 3.6)
Accessing first element by index: C
Accessing first element by using variable name: C
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;array&#34;&gt;Array&lt;/h3&gt;
&lt;p&gt;Unlike Tuples, Arrays are mutable. So, after assigning values we can change them. We can declare an array in many ways. such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
array_name = [item1, item2, ...]
array_name = Array([item1, item2, ...])
array_name = Array{DataType}([item1, item2, ...])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here in the third syntax of declaring array, we can specify what kind of data we want to assign in our array. Lets, create three arrays using these syntax.&lt;/p&gt;
&lt;h4 id=&#34;_input_-5&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;arr1 = [1, 2, 3]
arr2 = Array([2.5, &amp;quot;Hello&amp;quot;, 100])
arr3 = Array{Int64}([4, 6, 8])

println(&amp;quot;Elements of arr1: &amp;quot;, arr1)
println(&amp;quot;Elements of arr2: &amp;quot;, arr2)
println(&amp;quot;Elements of arr3: &amp;quot;, arr3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-5&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Elements of arr1: [1, 2, 3]
Elements of arr2: Any[2.5, &amp;quot;Hello&amp;quot;, 100]
Elements of arr3: [4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the example of 1 dimensional array. The syntax of declaring 2 dimensional array is follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
array_2d = [item1 item2; item3 item4; ...]

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s create an array which has 3 row and 2 columns or an &lt;code&gt;(3*2)&lt;/code&gt; array.&lt;/p&gt;
&lt;h4 id=&#34;_input_-6&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;arr_2d =[1 2; 3 4; 5 6]

arr_2d
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-6&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;3×2 Array{Int64,2}:
 1  2
 3  4
 5  6
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;array-operations&#34;&gt;Array Operations&lt;/h4&gt;
&lt;p&gt;To insert, delete or sort elements of an array we can use some built in methods like &lt;code&gt;insert(), deleteat(), push(), pushfirst(), pop(), popfirst(), sort()&lt;/code&gt;. Let&amp;rsquo;s use these methods. To insert elements in an array we can use &lt;code&gt;push()&lt;/code&gt;, &lt;code&gt;pushfirst()&lt;/code&gt; and &lt;code&gt;insert()&lt;/code&gt; methods. &lt;code&gt;push()&lt;/code&gt; method insert an element in the end of the array, &lt;code&gt;pushfirst()&lt;/code&gt; inserts an item at the begining of the array, and &lt;code&gt;insert()&lt;/code&gt; method insert an item into a given location. The syntax of &lt;code&gt;insert()&lt;/code&gt; method is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
insert(arr_name, position_to_insert, value)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s first insert into an array.&lt;/p&gt;
&lt;h4 id=&#34;_input_-7&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;test_arr = [1, 2, 3, 4, 5]

push!(test_arr, 100)

println(&amp;quot;Array after using push method: &amp;quot;, test_arr)

pushfirst!(test_arr, 12)

println(&amp;quot;Array after using pushfirst method: &amp;quot;, test_arr)

insert!(test_arr, 3, 2525)

println(&amp;quot;Array after using insert method: &amp;quot;, test_arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-7&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Array after using push method: [1, 2, 3, 4, 5, 100]
Array after using pushfirst method: [12, 1, 2, 3, 4, 5, 100]
Array after using insert method: [12, 1, 2525, 2, 3, 4, 5, 100]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To delete elements in an array, we can use &lt;code&gt;pop()&lt;/code&gt;, &lt;code&gt;popfirst()&lt;/code&gt; and &lt;code&gt;deleteat()&lt;/code&gt; methods. &lt;code&gt;pop()&lt;/code&gt; method deletes an element from the end of the array, &lt;code&gt;popfirst()&lt;/code&gt; deletes an item from the begining of the array, and &lt;code&gt;deleteat()&lt;/code&gt; method deletes an item from a given location. The syntax of &lt;code&gt;deleteat()&lt;/code&gt; method is&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
deleteat(arr_name, position_for_delete)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use the same array which we used with insertion methods.&lt;/p&gt;
&lt;h4 id=&#34;_input_-8&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(&amp;quot;Array before deleting elements: &amp;quot;, test_arr)

pop!(test_arr)

println(&amp;quot;Array after using pop method: &amp;quot;, test_arr)

popfirst!(test_arr)

println(&amp;quot;Array after using popfirst method: &amp;quot;, test_arr)

deleteat!(test_arr, 4)

println(&amp;quot;Array after using deleteat method at the 4th index: &amp;quot;, test_arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-8&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Array before deleting elements: [12, 1, 2525, 2, 3, 4, 5, 100]
Array after using pop method: [12, 1, 2525, 2, 3, 4, 5]
Array after using popfirst method: [1, 2525, 2, 3, 4, 5]
Array after using deleteat method at the 4th index: [1, 2525, 2, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides these inserting and deletion methods, there are some methods for other helpful tasks. Here, we will try to mention some of the methods. For sorting we can use &lt;code&gt;sort()&lt;/code&gt; method. Also, if we want arrays of ones or zeros we can use &lt;code&gt;ones()&lt;/code&gt; and &lt;code&gt;zeros()&lt;/code&gt; method respectively. We can generate random number from uniform distribution using &lt;code&gt;rand()&lt;/code&gt; method. To create random number from normal distribution we can use &lt;code&gt;randn()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see them in action.&lt;/p&gt;
&lt;h4 id=&#34;_input_-9&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# sorting test_arr

println(&amp;quot;Before sorting the test_array: &amp;quot;, test_arr)

sort!(test_arr)

println(&amp;quot;After sorting the test_array: &amp;quot;, test_arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-9&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Before sorting the test_array: [1, 2525, 2, 4, 5]
After sorting the test_array: [1, 2, 4, 5, 2525]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-10&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# create an 2*3 array of ones

ones_arr = ones(2, 3)

ones_arr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-10&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;2×3 Array{Float64,2}:
 1.0  1.0  1.0
 1.0  1.0  1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-11&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# create an 2*3 array of zeros

zeros_arr = zeros(2, 3)

zeros_arr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-11&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-12&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# create an array size of 2*5 with random variable from uniform distribution 

rand(2, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-12&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;2×5 Array{Float64,2}:
 0.451961  0.309916  0.193709  0.602781  0.160294
 0.737481  0.523093  0.662101  0.946056  0.804512
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-13&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# create an array size of 2*5 with random variable from normal distribution 

randn(2, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-13&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;2×5 Array{Float64,2}:
  0.907519  2.42625  0.909603  -0.420501   0.632623
 -1.78817   0.63605  0.17628    0.419475  -0.200928
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h3&gt;
&lt;p&gt;Dictionary is a collection of key-value pairs, where we can access the value using its key. We can declare dictionary in the following three ways:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
dict_name = Dict()
dict_name = Dict(key1 =&amp;gt; value1, key2 =&amp;gt; value2, ....)
dict_name = Dict{key_datatype, value_datatype}(key1 =&amp;gt; value1, key2 =&amp;gt; value2, ....)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here in the third syntax of declaring dictionary, we can specify the data types of keys and values.&lt;/p&gt;
&lt;h4 id=&#34;_input_-14&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;dict1 = Dict()

dict1[&amp;quot;Bangladesh&amp;quot;] = &amp;quot;Dhaka&amp;quot;
dict1[&amp;quot;Sweden&amp;quot;] = &amp;quot;Stockholm&amp;quot;

println(&amp;quot;Elements of dict1: &amp;quot;, dict1)

dict2 = Dict(&amp;quot;Apple&amp;quot; =&amp;gt; &amp;quot;Red&amp;quot;, &amp;quot;Orange&amp;quot; =&amp;gt; &amp;quot;Orange&amp;quot;, &amp;quot;Banana&amp;quot; =&amp;gt; &amp;quot;Yellow&amp;quot;)

println(&amp;quot;Elements of dict2: &amp;quot;, dict2)

dict3 = Dict{String, Int64}(&amp;quot;One&amp;quot; =&amp;gt; 1, &amp;quot;Two&amp;quot; =&amp;gt; 2, &amp;quot;Three&amp;quot; =&amp;gt; 3)

println(&amp;quot;Elements of dict3: &amp;quot;, dict3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-14&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Elements of dict1: Dict{Any,Any}(&amp;quot;Bangladesh&amp;quot; =&amp;gt; &amp;quot;Dhaka&amp;quot;,&amp;quot;Sweden&amp;quot; =&amp;gt; &amp;quot;Stockholm&amp;quot;)
Elements of dict2: Dict(&amp;quot;Apple&amp;quot; =&amp;gt; &amp;quot;Red&amp;quot;,&amp;quot;Orange&amp;quot; =&amp;gt; &amp;quot;Orange&amp;quot;,&amp;quot;Banana&amp;quot; =&amp;gt; &amp;quot;Yellow&amp;quot;)
Elements of dict3: Dict(&amp;quot;One&amp;quot; =&amp;gt; 1,&amp;quot;Two&amp;quot; =&amp;gt; 2,&amp;quot;Three&amp;quot; =&amp;gt; 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;accessing-dictionary-elements&#34;&gt;Accessing Dictionary Elements&lt;/h4&gt;
&lt;p&gt;To access the elements of dictionary we need to access them via their key. Suppose in &lt;code&gt;dict3&lt;/code&gt;, we want to access the value &lt;code&gt;3&lt;/code&gt;. So, we can do that by this:&lt;/p&gt;
&lt;h4 id=&#34;_input_-15&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(dict3[&amp;quot;Three&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-15&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, we can access the keys and values of a dictionary seperately by using &lt;code&gt;keys()&lt;/code&gt; and &lt;code&gt;values()&lt;/code&gt; method respectively.&lt;/p&gt;
&lt;h4 id=&#34;_input_-16&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(&amp;quot;Keys of dict3: &amp;quot;, keys(dict3))

println(&amp;quot;Values of dict3: &amp;quot;, values(dict3))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-16&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Keys of dict3: [&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;]
Values of dict3: [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;
&lt;p&gt;Another data structure of &lt;code&gt;julia&lt;/code&gt; is &lt;code&gt;set&lt;/code&gt;. &lt;code&gt;Set&lt;/code&gt; is like &lt;code&gt;array&lt;/code&gt;, its mutable. But the basic difference between them is, &lt;code&gt;set&lt;/code&gt; holds only &lt;code&gt;unique element&lt;/code&gt;. So, there will be no duplicate element in a &lt;code&gt;set&lt;/code&gt;. And the basic syntax of a set is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
set_name = Set([item1, item2, item3, ....])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do operations like union, intersection, difference between two sets using &lt;code&gt;union()&lt;/code&gt;, &lt;code&gt;intersect()&lt;/code&gt;, and &lt;code&gt;setdiff()&lt;/code&gt; methods respectively. Also we can check if one set is subset of another one by using &lt;code&gt;issubset()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Here we will create 2 sets and apply these functions on them.&lt;/p&gt;
&lt;h4 id=&#34;_input_-17&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;set1 = Set([1, 2, 3, 2, 5, &amp;quot;new&amp;quot;])

println(&amp;quot;Set1: &amp;quot;, set1)

set2 = Set([5, 2])

println(&amp;quot;Set1: &amp;quot;, set2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-17&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set1: Set(Any[&amp;quot;new&amp;quot;, 2, 3, 5, 1])
Set1: Set([2, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-18&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# union between two sets

union(set1, set2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-18&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set{Any} with 5 elements:
  &amp;quot;new&amp;quot;
  2
  3
  5
  1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-19&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# intersection between two sets

intersect(set1, set2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-19&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set{Any} with 2 elements:
  2
  5
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-20&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# set difference between two sets

setdiff(set1, set2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-20&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set{Any} with 3 elements:
  &amp;quot;new&amp;quot;
  3
  1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-21&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;# Checking if set2 is subset of set1

issubset(set2, set1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-21&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As, set is mutable, we can add or delete elements from it. To add elements we can use &lt;code&gt;push()&lt;/code&gt; method and to delete elements we can use &lt;code&gt;delete()&lt;/code&gt; method. For deletion, we need to tell specifically which element from a set we want to delete.&lt;/p&gt;
&lt;h4 id=&#34;_input_-22&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;push!(set1, &amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-22&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set{Any} with 6 elements:
  &amp;quot;new&amp;quot;
  2
  3
  &amp;quot;hello&amp;quot;
  5
  1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_input_-23&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;delete!(set1, &amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;_output_-23&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;Set{Any} with 5 elements:
  &amp;quot;new&amp;quot;
  2
  3
  5
  1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, thats it.&lt;/p&gt;
&lt;p&gt;Keep Practicing.&lt;/p&gt;
&lt;p&gt;Good luck, May the Julia be with you!!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Other posts in this series:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://fahim-sikder.github.io/post/julia-tutorial-part-1/&#34;&gt;Julia Tutorial Part 1: Installations &amp;amp; Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Julia Tutorial Part 1: Installations &amp; Basics</title>
      <link>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</link>
      <pubDate>Wed, 08 Jul 2020 14:24:00 +0600</pubDate>
      <guid>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</guid>
      <description>&lt;h2 id=&#34;introduction-installations-and-basics&#34;&gt;Introduction, Installations, and Basics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Julia&lt;/code&gt; is a open source programming language. It was designed from the beginning for high &lt;a href=&#34;https://julialang.org/benchmarks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;performance&lt;/a&gt;. Julia programs compile to efficient native code for multiple platforms via LLVM. To install it we need to download it&amp;rsquo;s binary from &lt;a href=&#34;https://julialang.org/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. We are going to use &lt;code&gt;Jupyter Notebook&lt;/code&gt; as the code editor. But to do that we need to link the &lt;code&gt;Jupyter Notebook&lt;/code&gt; with &lt;code&gt;Julia&lt;/code&gt;. After installing &lt;code&gt;Julia&lt;/code&gt;, open the Julia Command prompt with administration rights. Then type the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;
using Pkg
Pkg.add(&amp;quot;IJulia&amp;quot;)


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These will integrate &lt;code&gt;Julia&lt;/code&gt; environment with &lt;code&gt;Jupyter Notebbok&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;N.B: We are assuming that your system has already Jupyter notebook installed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Julia&lt;/code&gt; file has &lt;code&gt;.jl&lt;/code&gt; extensions. It&amp;rsquo;s time to write our first program. We will print &lt;code&gt;Hello Julia!&lt;/code&gt;. The print function in &lt;code&gt;julia&lt;/code&gt; is &lt;code&gt;println&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;_input_&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(&amp;quot;Hello Julia!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;Hello Julia!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations! We have just run your first program in &lt;code&gt;Julia&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;variables--data-types&#34;&gt;Variables &amp;amp; Data Types&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Julia&lt;/code&gt; support 5 basic data types.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Character&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can easily declare a variable just assigining the value in it. We don&amp;rsquo;t need to give the datatype when declaring a variable. Also we can see what is the datatype of a variable by using &lt;code&gt;typeof&lt;/code&gt; function. Lets see an example.&lt;/p&gt;
&lt;h5 id=&#34;_input_-1&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;first = 1

println(typeof(first))

second = 22.0

println(typeof(second))

third = true
println(typeof(third))

fourth = &amp;quot;Hello World!&amp;quot;
println(typeof(fourth))

fifth = &#39;L&#39;
println(typeof(fifth))
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-1&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;Int64
Float64
Bool
String
Char
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt; needs to be in double quotes or triple quotes. If we put &lt;code&gt;String&lt;/code&gt; in single quote, it will show error. Only &lt;code&gt;Character&lt;/code&gt; will be in single quote.&lt;/p&gt;
&lt;h5 id=&#34;_input_-2&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;#This is an intenional error

strr = &#39;Hello world&#39;
println(strr)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-2&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;syntax: invalid character literal
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;constant&#34;&gt;Constant&lt;/h3&gt;
&lt;p&gt;To declare a constant we need to use &lt;code&gt;const&lt;/code&gt; keyword. After defining a constant we can redefine it, but it will give us a warning. We only can redefine in the same datatype. Suppose: we created a constant with integer datatype with a value, so we can redefine it with another integer value though it will give a warning, but we can not redefine with another datatype. It will give an error.&lt;/p&gt;
&lt;h5 id=&#34;_input_-3&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;const var1 = 2
println(var1)
var1 = 3
println(var1)

#this will give error
var1 = 4.9
println(var1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-3&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;2
3


WARNING: redefining constant var1



invalid redefinition of constant var1



Stacktrace:

 [1] top-level scope at In[4]:5
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;strings&#34;&gt;Strings&lt;/h3&gt;
&lt;p&gt;As we have mentioned earlier, &lt;code&gt;String&lt;/code&gt; needs to be in double or triple quotes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;mystr = &amp;quot;Hey this is a string&amp;quot;

mystr2 = &amp;quot;&amp;quot;&amp;quot;
    this is a multiple line string
    this string has 2 lines
    &amp;quot;&amp;quot;&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the length of a string using the &lt;code&gt;length&lt;/code&gt; function.&lt;/p&gt;
&lt;h5 id=&#34;_input_-4&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;mystr = &amp;quot;Hey this is a string&amp;quot;

println(length(mystr))
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-4&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;taking-seperate-characters-from-string&#34;&gt;Taking seperate characters from string&lt;/h4&gt;
&lt;p&gt;We can access seperate characters from the string using index. Here we need to keep in mind that, unlike other programming language, &lt;code&gt;Julia&lt;/code&gt; access its first character from a string using index 1. Suppose in &lt;code&gt;mystr&lt;/code&gt; we want access the first character &lt;code&gt;H&lt;/code&gt; , so we need to access it using &lt;code&gt;mystr[1]&lt;/code&gt;. Now, if we want to access the last character of a string we need to use the &lt;code&gt;end&lt;/code&gt; keyword. So, in &lt;code&gt;mystr&lt;/code&gt; the last character is &lt;code&gt;g&lt;/code&gt; and we can access it by using &lt;code&gt;mystr[end]&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;_input_-5&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(mystr[1])
println(mystr[end])
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-5&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;H
g
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;substring&#34;&gt;Substring&lt;/h4&gt;
&lt;p&gt;We also can get a substring from a string by slicing it. To do that we need to use &lt;code&gt;:&lt;/code&gt; this. Suppose we want &lt;code&gt;this&lt;/code&gt; as substring from &lt;code&gt;mystr&lt;/code&gt; string. So, &lt;code&gt;this&lt;/code&gt; started from index number &lt;code&gt;5&lt;/code&gt; and ended in index number &lt;code&gt;8&lt;/code&gt;. Then we need to access it using &lt;code&gt;mystr[5:8]&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;_input_-6&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;println(mystr[5:8])
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-6&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;this
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;string-concatenation&#34;&gt;String Concatenation&lt;/h4&gt;
&lt;p&gt;To concatenate one string with another we need to use &lt;code&gt;*&lt;/code&gt; keyword. Suppose we have two strings. &lt;code&gt;str1 = &amp;quot;Hello&amp;quot;&lt;/code&gt; and &lt;code&gt;str2 = &amp;quot;World&amp;quot;&lt;/code&gt;. We can merge them like this:&lt;/p&gt;
&lt;h5 id=&#34;_input_-7&#34;&gt;&lt;em&gt;input&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;str1 = &amp;quot;Hello&amp;quot;
str2 = &amp;quot;World&amp;quot;

println(str1 * &amp;quot;, &amp;quot; * str2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;_output_-7&#34;&gt;&lt;em&gt;output&lt;/em&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;Hello, World
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats it for this tutorial.&lt;/p&gt;
&lt;p&gt;Good Luck, and May the Julia be with you!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Other posts in this series:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/&#34;&gt;Julia Tutorial Part 2: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
